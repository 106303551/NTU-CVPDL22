# -*- coding: utf-8 -*-
"""yolov7_train

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FViTGDokuMBJh3A6Rj6SYjpG76Xcy25-

#Setting
"""
import json
import cv2
import os
import matplotlib.pyplot as plt
import shutil
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--input_path', type=str, default='./drive/MyDrive/CVPDL/HW1/train', help='source of train')
parser.add_argument('--valid_path', type=str, default='./drive/MyDrive/CVPDL/HW1/valid', help='source of valid')
config = parser.parse_known_args()[0]

path="./"
folder_name = "c_datasets"
os.mkdir(os.path.join(path, folder_name))
path = path+folder_name+"/"
folder_name="train"
os.mkdir(os.path.join(path, folder_name))
folder_name = "valid"
os.mkdir(os.path.join(path, folder_name))
path = path+folder_name+"/"
os.mkdir(os.path.join(path, "images"))
os.mkdir(os.path.join(path, "labels"))
path ="./c_datasets/train/"
os.mkdir(os.path.join(path, "images"))
os.mkdir(os.path.join(path, "labels"))

input_path = config.input_path
valid_path = config.valid_path
output_path = "./c_datasets/train/images/"
with open(input_path+'/_annotations.coco.json', 'r') as f:
    data = json.load(f)
names=[]
for v in data['categories']:
  names.append(v['name'])
names.pop(0)
nc = len(names)

"""#Train Data"""

def load_images_from_folder(folder,output_path):
  file_names = []
  count = 0
  for filename in os.listdir(folder):
        source = os.path.join(folder,filename)
        destination = output_path

        try:
            shutil.copy(source, destination)
            print("File copied successfully.")
        # If source and destination are same
        except shutil.SameFileError:
            print("Source and destination represents the same file.")
        name,extension = os.path.splitext(filename)
        if(extension == ".jpg"):
          file_names.append(filename)
          count += 1
  return file_names

def get_img_ann(image_id):
    img_ann = []
    isFound = False
    for ann in data['annotations']:
        if ann['image_id'] == image_id:
            img_ann.append(ann)
            isFound = True
    if isFound:
        return img_ann
    else:
        return None

def get_img(filename):
  for img in data['images']:
    if img['file_name'] == filename:
      return img

count = 0
file_names = []
file_names = load_images_from_folder(input_path,output_path)
for filename in file_names:
  # Extracting image 
  img = get_img(filename)
  img_id = img['id']
  img_w = img['width']
  img_h = img['height']

  # Get Annotations for this image
  img_ann = get_img_ann(img_id)

  if img_ann:
    # Opening file for current image
    with open(f"./c_datasets/train/labels/{filename[:-4]}.txt", "w") as file_object:

      for ann in img_ann:
        current_category = ann['category_id']-1 # As yolo format labels start from 0 
        current_bbox = ann['bbox']
        x = current_bbox[0]
        y = current_bbox[1]
        w = current_bbox[2]
        h = current_bbox[3]
        
        # Finding midpoints
        x_centre = (x + (x+w))/2
        y_centre = (y + (y+h))/2
        
        # Normalization
        x_centre = x_centre / img_w
        y_centre = y_centre / img_h
        w = w / img_w
        h = h / img_h
        
        # Limiting upto fix number of decimal places
        x_centre = format(x_centre, '.6f')
        y_centre = format(y_centre, '.6f')
        w = format(w, '.6f')
        h = format(h, '.6f')
            
        # Writing current object 
        file_object.write(f"{current_category} {x_centre} {y_centre} {w} {h}\n")

    count += 1  # This should be outside the if img_ann block.

"""#Validation data"""

output_path = "./c_datasets/valid/images/"
with open(valid_path+'/_annotations.coco.json', 'r') as f:
    data = json.load(f)

count = 0
file_names = []
file_names = load_images_from_folder(valid_path,output_path)
for filename in file_names:
  # Extracting image 
  img = get_img(filename)
  img_id = img['id']
  img_w = img['width']
  img_h = img['height']

  # Get Annotations for this image
  img_ann = get_img_ann(img_id)

  if img_ann:
    # Opening file for current image
    with open(f"./c_datasets/valid/labels/{filename[:-4]}.txt", "w") as file_object:

      for ann in img_ann:
        current_category = ann['category_id']-1 # As yolo format labels start from 0 
        current_bbox = ann['bbox']
        x = current_bbox[0]
        y = current_bbox[1]
        w = current_bbox[2]
        h = current_bbox[3]
        
        # Finding midpoints
        x_centre = (x + (x+w))/2
        y_centre = (y + (y+h))/2
        
        # Normalization
        x_centre = x_centre / img_w
        y_centre = y_centre / img_h
        w = w / img_w
        h = h / img_h
        
        # Limiting upto fix number of decimal places
        x_centre = format(x_centre, '.6f')
        y_centre = format(y_centre, '.6f')
        w = format(w, '.6f')
        h = format(h, '.6f')
            
        # Writing current object 
        file_object.write(f"{current_category} {x_centre} {y_centre} {w} {h}\n")

    count += 1  # This should be outside the if img_ann block.

"""#generate yaml"""

import yaml

data = {
    'train': "./c_datasets/train/images",
    'val':"./c_datasets/valid/images",
    'train_labels':"./c_datasets/train/labels",
    'val_labels':"./c_datasets/valid/labels",
    'nc': nc,
    'names': names,
}

with open('./c_datasets/data.yaml', 'w') as file:
    yaml.dump(data,file)
shutil.move('./c_datasets','./yolov7/')

"""# Reparameterize for Inference

https://github.com/WongKinYiu/yolov7/blob/main/tools/reparameterization.ipynb
"""