# -*- coding: utf-8 -*-
"""DETR_test

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CjF7sZcQ4H0Mh0uYc4v1PqQgdXQNa1IZ
"""

"""# Testing"""

import argparse
import os
from transformers import AutoImageProcessor
from transformers import AutoModelForObjectDetection
parser = argparse.ArgumentParser()
parser.add_argument('--model_path', type=str, default='./drive/MyDrive/detr-resnet-50_finetuned_cppe5_2', help='model path')
parser.add_argument('--test_path', type=str, default='./drive/MyDrive/CVPDL/HW1/valid', help='source of data')
parser.add_argument('--output_path', type=str, default='./output/result.json', help='output json path')
config = parser.parse_known_args()[0]
test_path = config.test_path
model_path = config.model_path
output_path = config.output_path

def load_images_from_folder(folder):
  file_names = []
  count = 0
  for filename in os.listdir(folder):
        name,extension = os.path.splitext(filename)
        if(extension == ".jpg"):
          file_names.append(filename)
          count += 1
  return file_names

filenames=[]
filenames = load_images_from_folder(test_path)

import albumentations
test_transform = albumentations.Compose(
    [
        albumentations.Resize(480, 480),
    ]
)

from PIL import Image
from collections import defaultdict
import torch
import numpy as np
import json
image_processor = AutoImageProcessor.from_pretrained(model_path)
if torch.cuda.is_available():
  device = torch.device("cuda")# a CUDA device object
else:
  device="cpu"
model = AutoModelForObjectDetection.from_pretrained(model_path).to(device)
result = defaultdict()
with torch.no_grad():
  for imgname in filenames:
    image = Image.open(test_path+f"/{imgname}")
    target_sizes = torch.tensor([image.size[::-1]])
    image = np.array(image.convert("RGB"))
    out = test_transform(image=image)
    inputs = image_processor(images=out['image'], return_tensors="pt")
    inputs = inputs.to(device)
    outputs = model(**inputs)
    pred = image_processor.post_process_object_detection(outputs, threshold=0.2, target_sizes=target_sizes)[0]
    boxes = pred['boxes'].cpu().numpy().tolist()
    labels = pred['labels'].cpu().numpy().tolist()
    scores = pred['scores'].cpu().numpy().tolist()
    diction={
        'boxes':boxes,
        'labels':labels,
        'scores':scores
    }
    result[imgname]=diction
    for score, label, box in zip(pred["scores"], pred["labels"], pred["boxes"]):
        box = [round(i, 2) for i in box.tolist()]
        print(
            f"Detected {model.config.id2label[label.item()]} with confidence "
            f"{round(score.item(), 3)} at location {box}"
        )
folder_path = os.path.dirname(output_path) 
if not os.path.isdir(folder_path): # 檢查是否存在資料夾
  os.mkdir(folder_path) # 如果不存在，創建資料夾
with open(output_path, "w") as outfile:
  json_object = json.dumps(result,ensure_ascii=False)
  outfile.write(json_object)